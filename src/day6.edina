import "stdlib/io/std"
import "stdlib/math/ints"
import "stdlib/strings"
import "stdlib/stack"
import "aoc"
import "input/input6"

.part_one
.part_two

# The first 4 unique character sequence denotes a packet start. Find the position of the first one.
rt part_one
  # Find the start marker from the input
  :input6.input
  4 .find_first_diffs

  # Copy the four relevant items to the front
  dup 2 + :aoc.copy swap
  dup 2 + :aoc.copy swap
  dup 2 + :aoc.copy swap
  dup 2 + :aoc.copy swap

  # Print info
  6 :aoc.copy - 4 + :ints.int_to_str " is the packet start marker position" :strings.concat :std.println_out
  4 " is the packet start marker" :strings.concat :std.println_out
  :stack.multi_pop
end

# The first 14 unique character sequence denotes a message start. Find the position of the first one.
rt part_two
  # Find the msg start marker from the input
  :input6.input
  14 .find_first_diffs

  # Print info
  2 :aoc.copy - 14 + :ints.int_to_str " is the message start marker position" :strings.concat :std.println_out
  :stack.multi_pop
end

# Find the position of the first first N unique characters
rt find_first_diffs
  # [Num, Len, A, B, C, D]
  over over :aoc.lte if
    # if (4 <= Num)
    0                               # [Res, Num, Len, A, B, C, D]
    3 :aoc.copy                     # [Idx, Res, Num, Len, A, B, C, D]
    while
      3 :aoc.copy over swap :aoc.lt if
        # if (Num < Idx)
        # [Idx, Res, Num, Len, A, B, C]

        # TODO: The stuff below is a hardcoded Num=4, but Num can be anything. Change this so that we pull Num items instead of 4 items

        3 :aoc.copy dup              # [NumI, NumO, Idx, Res, Num, Len, A, B, C, D]
        while
          swap :aoc.peek_sub         # [NumO-NumI, NumO, NumI, Idx, Res, Num, Len, A, B, C, D]
          4 :aoc.copy +              # [Idx+(NumO-NumI), NumO, NumI, Idx, Res, Num, Len, A, B, C, D]
          1 3 lroll swap 1 3 rroll   # [Idx+(NumO-NumI), NumI, NumO, Idx, Res, Num, Len, A, B, C, D]
          pop 3 :aoc.copy
          6 + :aoc.copy              # [D, NumI, NumO, Idx, Res, Num, Len, A, B, C, D]
          1 4 lroll                  # [NumI, NumO, D, Idx, Res, Num, Len, A, B, C, D]
          1 swap -                   # [NumI-1, NumO, Idx, D, Res, Num, Len, A, B, C, D]
        end
        pop # Get rid of NumI

        # [NumO, Idx, A, B, C, D, Res, Num, Len, A, B, C, D]
        swap over 2 +                # [NumO+2, Idx, NumO, A, B, C, D, Res, Num, Len, A, B, C, D]
        1 swap lroll                 # [NumO, A, B, C, D, Idx, Res, Num, Len, A, B, C, D]
        .is_completely_different if
          # All different
          :stack.multi_pop           # [Idx, Res, Num, Len, A, B, C, D]
          swap pop 0                 # [Idx->0, Res->Idx, Num, Len, A, B, C, D]
        else
          # Not different
          :stack.multi_pop           # [Idx, Res, Num, Len, A, B, C, D]
          1 swap -                   # [Idx-1, Res, Num, Len, A, B, C, D]
        end
      else
        1 swap -
      end
    end
    pop      # Get rid of Idx
    swap pop # Get rid of Num
  else
    pop -1  # Replace Num with -1
  end
end

# Checks if the supplied array only contains unique entries
rt is_completely_different
  # [Len, A, B, C]
  0                          # [Res, Len, A, B, C]
  over 1 :aoc.lt if
    over                     # [LenX, Res, Len, A, B, C]
    1 swap -                 # [LenX-1, Res, Len, A, B, C]
    while
      # X Loop
      # for (int x = 0; x < len - 1; x++)
      # for (int x = len - 2; x >= 0; x--)
      # for (int x = len - 1; x > 0; x--)
      3 :aoc.copy            # [LenY, LenX, Res, Len, A, B, C]

      while
        # Y Loop
        # for (int y = x+1; y < len; y++)
        # for (int y = len-1; y >= x+1; y--)
        # for (int y = len; y > x; y--)

        #swap 1 4 rroll       # [Len, LenX, LenY, Res, A, B, C]
        #:aoc.peek_sub        # [(Len-LenX)->Min, Len, LenX, LenY, Res, A, B, C]

        #swap 1 5 lroll       # [Min, LenX, LenY, Res, Len, A, B, C]
        #1 3 lroll swap       # [LenY, LenX, Min, Res, Len, A, B, C]
        #1 3 rroll lt         # [Min<LenY, Min, LenY, LenX, Res, Len, A, B, C]
        #swap pop             # [Min<LenY, LenY, LenX, Res, Len, A, B, C]

        # [LenY, LenX, Res, Len, A, B, C]
        gt                    # [LenY>LenX, LenY, LenX, Res, Len, A, B, C]

        if
          # Only run if we are above the current X

          # Copy element Y to front
          dup 4 +            # [LenY+4, LenY, LenX, Res, Len, A, B, C]
          :aoc.copy          # [C, LenY, LenX, Res, Len, A, B, C]

          # Copy element X to front
          3 :aoc.copy        # [LenX, C, LenY, LenX, Res, Len, A, B, C]
          5 + :aoc.copy      # [B, C, LenY, LenX, Res, Len, A, B, C]

          # Check if different
          :aoc.neq if
            # Different, increment Res
            1 3 rroll        # [Res, LenY, LenX, Len, A, B, C]
            1 +              # [Res+1, LenY, LenX, Len, A, B, C]
            1 3 lroll        # [LenY, LenX, Res+1, Len, A, B, C]
          end
        end
        1 swap -
      end
      pop # Remove LenY
      1 swap -
    end
    pop over dup             # [Len, Len, Res, Len, A, B, C]
    1 swap - *               # [(Len-1)*Len, Res, Len, A, B, C]
    2 swap /                 # [((Len-1)*Len)/2, Res, Len, A, B, C]
    :aoc.eq                  # [Res == Total Runs, Len, A, B, C]
  else
    pop -1
  end
end