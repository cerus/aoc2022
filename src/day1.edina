import "stdlib/io/std"
import "stdlib/math/ints"
import "stdlib/strings"
import "aoc"
import "input/input1"

# [Len1, Str1, Len2, Str2, ...]

:input1.input

0 0 2 ssize -           # [Size-2, Max, Cur, Len1, Str1, Len2, Str2, ...]
while
  # Run while there are items on the stack
  1 4 rroll             # [Len1, Size, Max, Cur, Str1, Len2, Str2, ...]
  0 eq if
    # Empty line
    # Check if Cur > Max and handle accordingly
    # [0, Len1, Size, Max, Cur, Len2, Str2, ...]
    pop pop 1 3 lroll   # [Max, Cur, Size, Len2, Str2, ...]

    lt if
      # Max < Cur
      pop 0 swap        # [Cur->Max, Cur->0, Size, Len2, Str2, ...]
    else
      swap pop 0 swap
    end

    # Reset for next run
    1 3 rroll           # [Size, Max, Cur, Len2, Str2, ...]
    pop ssize           # Swap old Size with current stack size
    2 swap -            # [Size-2, Max, Cur, Len1, Str1, Len2, Str2, ...]
  else
    # Line not empty
    # Parse the line and add to Cur
    # [0, Len1, Size, Max, Cur, Str1, Len2, Str2, ...]
    pop dup             # [Len1, Len1, Size, Max, Cur, Str1, Len2, Str2, ...]
    1 5 lroll 4 +       # [Len1+4, Size, Max, Cur, Len1, Str1, Len2, Str2, ...]
    3 swap lroll        # [Len1, Str1, Size, Max, Cur, Len2, Str2, ...]
    10 :ints.parse_int  # [Num, Size, Max, Cur, Len2, Str2, ...]
    1 4 rroll +         # [Cur+Num, Size, Max, Len2, Str2, ...]

    # Reset to [Size, Max, Cur, Len1, Str1, Len2, Str2, ...]
    1 3 lroll           # [Size, Max, Cur, Len1, Str1, Len2, Str2, ...]
    pop ssize           # Swap old Size with current stack size
    2 swap -            # [Size-2, Max, Cur, Len1, Str1, Len2, Str2, ...]
  end
end

pop swap pop
# -> [67622]

:ints.int_to_str :std.println_out